#!/bin/bash

echo "PDesireCoreKernel Kernel Buildscript"
echo

function goto
{
    label=$1
    cmd=$(sed -n "/$label:/{:a;n;p;ba};" $0 | grep -v ':$')
    eval "$cmd"
    exit
}

MY_PATH="`dirname \"$0\"`"              # relative
MY_PATH="`( cd \"$MY_PATH\" && pwd )`"  # absolutized and normalized
if [ -z "$MY_PATH" ] ; then
  # error; for some reason, the path is not accessible
  # to the script (e.g. permissions re-evaled after suid)
  exit 1  # fail
fi

# Tuneables Here
toolchain="arm-linux-androideabi-4.9"
prefix="arm-linux-androideabi-"
toolchain_path="/home/pdesire/kernel/tools/toolchain/$toolchain/bin/:$PATH"
name_of_your_kernel="PDesireCoreKernel-1.0"
defconfig="tetra_defconfig"
cpu_jobs="`grep -c ^processor /proc/cpuinfo`"
kerneltype="zImage"
author="Tristan Marsell (tristan.marsell@t-online.de)"
kernel_author="PDesire (Tristan Marsell)"
ps=2048
base=0x00000000
ramdisk_offset=0x86000000
tags_offset=0x85000100


export USE_CCACHE=1
export CCACHE_DIR=~/.ccache-ubertc

export ARCH=arm
export PATH=$toolchain_path
export CROSS_COMPILE=$prefix

# Go to kernel root
cd $MY_PATH

while read -p "Do you want to make clean (y/n)? " cchoice
do
case "$cchoice" in
	y|Y )
		echo "Removing old files..."
		rm -rf final_files
		rm -f log*
		make mrproper -j$cpu_jobs
		rm -rf arch/arm64/boot/"$kerneltype"
		
		echo "Removing old files..."
		mkdir final_files
		chmod -R 0755 final_files
		break
		;;
	n|N )
		break
		;;
	* )
		echo
		echo "Invalid try again!"
		echo
		;;
esac
done

target="SmartWatch 3"
device_name="tetra"
device_codename="tetra"

while read -p "Do you want to make defconfig (y/n)? " cchoice
do
case "$cchoice" in
	y|Y )
		make $defconfig -j$cpu_jobs |& tee log_defconfig.txt
		echo
		echo "Done"
		echo
		break
		;;
	n|N )
		break
		;;
	* )
		echo
		echo "Invalid try again!"
		echo
		;;
esac
done

echo " "
echo " "
echo "##################################################"
echo "Kernel Infos:"
echo "Bootsplash Kernel Name: $name_of_your_kernel"
echo "SoC (ARCH) Type: AARCH64 (ARM64)"
echo "Used Defconfig: $defconfig"
echo "Used Diffconfig: $diffconfig"
echo "Kerneltype: $kerneltype"
echo "Kernel Authors: $kernel_author"
echo "CCache used: Yes"
echo "--------------------------------------------------"
echo "Ramdisk Infos:"
echo "Ramdisk Cmdline: $cmdline"
echo "Pagesize: $ps Kilobytes"
echo "Base: $base"
echo "Ramdisk Offset: $ramdisk_offset"
echo "Tags Offset: $tags_offset"
echo "--------------------------------------------------"
echo "Build Infos:"
echo "Build Target Device: $target"
echo "Toolchain: $toolchain"
echo "Threads: $cpu_jobs"
echo "Buildscript Author: $author"
echo "##################################################"
echo " "
echo " "
echo " "
echo "Little CPU Cooldown (5sec)"
sleep 5s


while read -p "Do you want to build (y/n)? " cchoice
do
echo
case "$cchoice" in
	y|Y )
		sleep 2s
		echo "Build Countdown:"
		sleep 1s
		echo "3..."
		sleep 1s
		echo "2..."
		sleep 1s
		echo "1..."
		sleep 1s
		echo "Start building PDesireCoreKernel..."
		make -j$cpu_jobs |& tee log_compile.txt
		echo "Done"
		echo
		break
		;;
	n|N )
		break
		;;
	* )
		echo
		echo "Invalid try again!"
		echo
		;;
esac
done

if [ -f arch/arm/boot/"$kerneltype" -a ! -f final_files/*.img ]; then
	echo "Making boot.img..."
	./mkbootimg --base $base --kernel arch/arm/boot/zImage-dtb --ramdisk propietaries/$device_codename/ramdisk.cpio.gz --ramdisk_offset $ramdisk_offset --pagesize $ps -o final_files/boot_$device_name.img --tags_offset $tags_offset
fi

if [ -f final_files/*.img ]; then
	# Packing to ZIP
	cp -fr flashscripts/* final_files
	chmod -R 0777 final_files
	cd final_files
	mv boot_$device_name.img boot.img
	zip -r $device_codename.$name_of_your_kernel.zip *
	cd ..
	mkdir uploads
	chmod -R 0777 uploads
	mv final_files/$device_codename.$name_of_your_kernel.zip uploads/$device_codename.$name_of_your_kernel.zip
	chmod -R 0777 uploads
	chmod -R 0777 final_files
fi

end:
exit 0;
